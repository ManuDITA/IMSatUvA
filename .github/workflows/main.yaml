name: "Terraform action"
on:
  push:
    branches:
      - master
    types:
      - deleted  
  pull_request:
    types:
      - closed #will trigger cleanup where pr is merged and closed
  workflow_dispatch: # allows manual trigger with Git UI

permissions:
  id-token: write  # Required for AWS OIDC connection
  contents: read   # Required for actions/checkout
  pull-requests: write  # Required for GitHub bot to comment on PRs

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    if: github.event.pull_request.merged != true && github.event.pull_request.base.ref != 'master'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: "1.2.5" 
      - name: Terraform fmt
        id: fmt
        run: terraform fmt
        continue-on-error: false

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: | # doing this to get clean name without / and then get a terraform safe name
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's|refs/heads/||' | sed 's|/|-|g' | sed 's|env:/||g') 
          TF_STATE_KEY="${BRANCH_NAME}.tfstate"  
          echo "TF_STATE_KEY=${TF_STATE_KEY}" >> $GITHUB_ENV  
          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}"
          
      - name: Select terraform workspace   
        run: |
         terraform workspace select ${BRANCH_NAME} || terraform workspace new "${BRANCH_NAME}"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Manual Terraform Apply (Feature branch)
        if: github.ref != 'refs/heads/master' && github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve -input=false

      - name: Auto Terraform Apply (main branch)
        if: github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve -input=false

  cleanup:
    if: github.event.pull_request.merged == true || github.event.pull_request.base.ref == 'master' || github.event.delete.ref != null
    runs-on: ubuntu-latest

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: "1.2.5"

      - name: Set Terraform State File (Merged pull request)
        if: ${{ github.event.pull_request != null }}
        run: |
          DELETE_BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          BRANCH_NAME=$(echo $DELETE_BRANCH_NAME | sed 's|/|-|g') 
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "Branch that was deleted: ${BRANCH_NAME}"
          TF_STATE_KEY="${BRANCH_NAME}.tfstate"  
          echo "TF_STATE_KEY=${TF_STATE_KEY}" >> $GITHUB_ENV 

      - name: Set Terraform State File for Cleanup (Deleted branch after merge)
        if: ${{ github.event_name == 'push' && github.event_name == 'delete' }}
        run: |
          DELETE_BRANCH_NAME=$(echo $GITHUB_REF | sed 's|refs/heads/||') 
          BRANCH_NAME=$(echo $DELETE_BRANCH_NAME | sed 's|/|-|g') 
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "Branch that was deleted: ${BRANCH_NAME}"
          TF_STATE_KEY="${BRANCH_NAME}.tfstate"  
          echo "TF_STATE_KEY=${TF_STATE_KEY}" >> $GITHUB_ENV 
          
      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: | # doing this to get clean name without / and then get a terraform safe name
           terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}"
           
      - name: Select Terraform Workspace
        run: |
         terraform workspace select ${BRANCH_NAME} || terraform workspace new "${BRANCH_NAME}"

      - name: Debug Terraform State
        run: terraform state list || echo "No state found for this branch."
      
      - name: Terraform Apply 
        run: |
          terraform apply -auto-approve

      - name: Destroy Feature Branch Resources
        run: terraform destroy -auto-approve
