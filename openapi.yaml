openapi: 3.0.0
info:
  title: Store and Stock Management API
  description: API for managing stores, stock, and admin users
  version: 1.0.0

servers:
  - url: https://{env}.example.com/{version}
    variables:
      env:
        default: dev    
        enum:
          - prod         
          - dev     
          - testing
      version:
        default: v1

paths:
  /stock:
    get:
      tags: 
        - Stock Management      
      summary: Get all stock items
      operationId: getAllStock
      responses:
        '200':
          description: A list of stock items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryItem"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No existing stock

  /stock/{id}:
    get:
      tags: 
        - Stock Management
      summary: Get a stock item by ID
      operationId: getStockItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Stock item details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No existing stock item
    put:
      tags: 
        - Stock Management
      security:
        - bearerAuthUser: []
      summary: Update a stock item
      operationId: updateStockItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryItem"
        '403':
          description: Forbidden
    delete:
      tags: 
        - Stock Management
      security:
        - bearerAuthUser: []
      summary: Remove a stock item
      operationId: removeStockItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Removed successfully
        '403':
          description: Forbidden
        '404':
          description: No existing stock

  /stock/move:
    post:
      tags: 
        - Stock Management
      security:
        - bearerAuthUser: []
      summary: Move a stock item between stores
      operationId: moveStockItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: string
                fromStore:
                  type: string
                toStore:
                  type: string
      responses:
        '200':
          description: Item moved successfully

  /stores:
    get:
      tags: 
        - Store Management
      summary: Get all stores
      operationId: getAllStores
      responses:
        '200':
          description: List of available stores

  /stores/{id}:
    get:
      tags: 
        - Store Management
      summary: Get a store by ID
      operationId: getStoreById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Store details
    put:
      tags: 
        - Store Management
      security:
        - bearerAuthUserAdmin: []
      
      summary: Update a store
      operationId: updateStore
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Store updated
    delete:
      tags: 
        - Store Management
      security:
        - bearerAuthUserAdmin: []
      
      summary: Remove a store
      operationId: removeStore
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Store removed

  /stock/available:
    get:      
      tags: 
        - Store Management
      summary: Get only available stock items
      operationId: getAvailableStock
      responses:
        '200':
          description: List of available stock items

  /cart/{id}:
    post:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      summary: Add item to user cart
      operationId: addItemToCart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                itemId:
                  type: string
                quantity:
                  type: integer
      responses:
        '200':
          description: Item added to cart
    delete:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      
      summary: Remove item from user cart
      operationId: removeItemFromCart
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item removed from cart
    put:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      summary: Update item quantity in user cart
      operationId: updateCartItemQuantity
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Cart item updated

  /cart/reserve/{id}:
    post:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      
      summary: Reserve an item in the cart
      operationId: reserveCartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                itemId:
                  type: string
      responses:
        '200':
          description: Item reserved

  /admin:
    post:
      tags:
        - Admin Management
      security:
        - bearerAuthUserAdmin: []
      summary: Create new admin account
      operationId: createAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        '200':
          description: Admin account created successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /admin/change-password:
    put:
      tags:
        - Admin Management
      security:
        - bearerAuthAdmin: []
      summary: Change admin password
      operationId: changeAdminPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid request data
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  /admin/{username}:
    delete:
      tags:
        - Admin Management
      security:
        - bearerAuthUserAdmin: []
      summary: Remove admin or user account
      operationId: removeAdmin
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Admin account removed successfully

  /user/register:
    post:
      tags:
        - User Management
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid request data

  /user/login:
    post:
      tags:
        - User Management
      summary: User login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /user/change-password:
    put:
      tags:
        - User Management
      security:
        - bearerAuthUser: []
      summary: Change user password
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid request data
        '401':
          $ref: '#/components/responses/UnauthorizedError'


components:
  schemas:
    LoginUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          format: string
          example: Emanuele
        password:
          type: string
          format: password
          example: veryStrongPassword123!
    InventoryItem:
      type: object
      required:
        - id
        - name
        - manufacturer
        - releaseDate
        - storedIn
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Watch
        releaseDate:
          type: string
          format: date-time
          example: '2016-08-29T09:12:33.001Z'
        manufacturer:
          type: string
          example: Rolex
        storedIn:
          $ref: "#/components/schemas/Store"
    Store:
      required:
        - name
        - address
        - phone
      properties:
        name:
          type: string
          example: ACME Corporation
        address:
          type: string
          format: address
          example: 'Via Roma'
        phone:
          type: string
          example: 408-867-5309
      type: object
    Cart:
      required:
        - owner
        - total Price
        - purchased items
      properties:
        owner:
          type: string
        total Price:
          type: integer
        purchased items: 
          type: array
          items:
            $ref: '#/components/schemas/InventoryItem'
  securitySchemes:
    bearerAuthUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
    bearerAuthUserAdmin:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid