openapi: 3.0.0
info:
  title: Store and Stock Management API
  description: API for managing stores, stock, and admin users
  version: 1.0.0

servers:
  - url: https://{env}.example.com/{version}
    variables:
      env:
        default: dev    
        enum:
          - prod         
          - dev     
          - testing
      version:
        default: v1

paths:
  /stock:
    get:
      tags: 
        - Stock Management  
      security:
        - bearerAuthUser: []
      summary: Get all stock items
      operationId: getAllStock
      responses:
        '200':
          description: A list of stock items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InventoryItem"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No existing stock

  /stock/{id}:
    get:
      tags: 
        - Stock Management
      security:
        - bearerAuthUser: []
      summary: Get a stock item by ID
      operationId: getStockItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Stock item details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No existing stock item
    put:
      tags: 
        - Stock Management
      security:
        - bearerAuthUserAdmin: []
      summary: Update a stock item
      operationId: updateStockItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryItem"
        '403':
          description: Forbidden
    delete:
      tags: 
        - Stock Management
      security:
        - bearerAuthUserAdmin: []
      summary: Remove a stock item
      operationId: removeStockItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Removed successfully
        '403':
          description: Forbidden
        '404':
          description: No existing stock

  /stores:
    get:
      tags: 
        - Store Management
      summary: Get all stores
      security:
        - bearerAuthUser: []
      operationId: getAllStores
      responses:
        '200':
          description: List of available stores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Store"

  /stores/{id}:
    get:
      tags: 
        - Store Management
      security:
        - bearerAuthUserAdmin: []
      summary: Get a store by ID
      operationId: getStoreById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Store details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
    put:
      tags: 
        - Store Management
      security:
        - bearerAuthUserAdmin: []
      summary: Update a store
      operationId: updateStore
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Store updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
    delete:
      tags: 
        - Store Management
      security:
        - bearerAuthUserAdmin: []
      summary: Remove a store
      operationId: removeStore
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Store removed

  /store/{id}/stock/:
    get:   
      tags:
        - Store Management
      security:
        - bearerAuthUserAdmin: []
      summary: Get stock items for a given store
      operationId: getStoreInventory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Get list of stock items for the given store
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StockItem"
                  
  /store/{id}/stock/{iid}:
    get:   
      tags:
        - Store Management
      security:
        - bearerAuthUserAdmin: []
      summary: Get stock items for a given store
      operationId: getStoreSingleItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of available stock items
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/StockItem"
    
    post:
      tags: 
        - Store Management
      security:
        - bearerAuthUserAdmin: []
      summary: Move a stock item between stores
      operationId: moveStockItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  format: int32
                toStore:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Item moved successfully

  /cart/{userId}:
    get:   
      tags:
        - User Cart Management
      security:
        - bearerAuthUserAdmin: []
      summary: Get the target user's cart
      operationId: getUserCart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of available stock items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StockItem"

  /cart/{userId}/stock/{iid}:
    post:
      tags:
        - User Cart Management
      security:
        - bearerAuthUser: []
      summary: Add item to user cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: addItemToCart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Item added to cart
    delete:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      
      summary: Remove item from user cart
      operationId: removeItemFromCart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Item removed from cart
    put:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      summary: Update item quantity in user cart
      operationId: updateCartItemQuantity
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Cart item updated

  /cart/{userId}/reserve/{iid}:
    post:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      
      summary: Reserve an item in the cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: iid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      operationId: reserveCartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Item reserved


components:
  schemas:
    InventoryItem:
      type: object
      required:
        - id
        - name
        - storedIn
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Watch
    StockItem:
      type: object
      required:
        - id
        - quantity
      properties:
        item:
          $ref: "#/components/schemas/InventoryItem"
        quantity:
          type: integer
          format: int32
          example: 1102
    Store:
      required:
        - name
        - address
      properties:
        name:
          type: string
          example: ACME Corporation
        address:
          type: string
          format: address
          example: 'Via Roma'
      type: object
  securitySchemes:
    bearerAuthUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
    bearerAuthUserAdmin:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid