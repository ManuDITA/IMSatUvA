openapi: 3.0.1
info:
  title: Store and Stock Management API
  description: API for managing stores, stock, and admin users
  version: 1.0.0

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/uvadevopslab/tutorial/1.0.0
  - url: https://{env}.example.com/{version}
    variables:
      env:
        default: dev    
        enum:
          - prod         
          - dev     
          - testing
      version:
        default: v1

paths:
  /items:
    get:
      tags: 
        - Item Management
      summary: Gets all stock item definitions
      operationId: getAllItemDefs
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${get_all_items_arn}"
        passthroughBehavior: "when_no_match"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemTemplate"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    put:
      tags: 
        - Item Management
      summary: Creates a stock item definition
      operationId: postItemDefs
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${register_item_arn}"
        passthroughBehavior: "when_no_match"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemTemplateNoID'
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'   

  /items/{itemId}:
    get:
      tags: 
        - Item Management
      summary: Gets target item definition
      operationId: getItemDef
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${get_item_arn}"
        passthroughBehavior: "when_no_match"
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemTemplate"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      tags: 
        - Item Management
      summary: Deletes target item definition
      operationId: deleteItemDef
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${delete_item_arn}"
        passthroughBehavior: "when_no_match"
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemTemplate"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /stores:
    get:
      tags: 
        - Store Management
      summary: Gets all stores
      operationId: getAllStores
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${get_all_stores_arn}"
        passthroughBehavior: "when_no_match"
      responses:
        '200':
          description: List of available stores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Store"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      tags: 
        - Store Management
      summary: Adds a store
      operationId: addStore
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${add_store_arn}"
        passthroughBehavior: "when_no_match"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreNoID"
      responses:
        '200':
          description: Store added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'

  /stores/{storeId}:
    get:
      tags: 
        - Store Management
      summary: Gets target store
      operationId: getStoreById
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${get_store_arn}"
        passthroughBehavior: "when_no_match"
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Store details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    delete:
      tags: 
        - Store Management
      summary: Deletes a store
      operationId: deletetore
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${delete_store_arn}"
        passthroughBehavior: "when_no_match"
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Store removed
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  # /stores/{storeId}/stock/:
  #   get:   
  #     tags:
  #       - Store Management
  #     summary: Gets all stock items from specified store
  #     operationId: getStoreInventory
  #     parameters:
  #       - name: storeId
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/StoreItem"
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedResponse'
  #       '404':
  #         $ref: '#/components/responses/NotFoundResponse'
  #   put:   
  #     tags:
  #       - Store Management
  #     summary: Adds or updates stock item from specified store
  #     operationId: updateStoreItem
  #     parameters:
  #       - name: storeId
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/StoreItem"
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedResponse'
  #       '403':
  #         $ref: '#/components/responses/ForbiddenResponse'
  #       '404':
  #         $ref: '#/components/responses/NotFoundResponse'
                  
  /stores/{storeId}/stock/{itemId}:
    # get:   
    #   tags:
    #     - Store Management
    #   summary: Gets stock item from specified store
    #   operationId: getStoreItem
    #   parameters:
    #     - name: storeId
    #       in: path
    #       required: true
    #       schema:
    #         type: string
    #         format: uuid
    #     - name: itemId
    #       in: path
    #       required: true
    #       schema:
    #         type: string
    #         format: uuid
    #   responses:
    #     '200':
    #       description: Success
    #       content:
    #         application/json:
    #           schema:
    #               $ref: "#/components/schemas/StoreItem"
    #     '401':
    #       $ref: '#/components/responses/UnauthorizedResponse'
    #     '404':
    #       $ref: '#/components/responses/NotFoundResponse'
    # x-amazon-apigateway-integration:
    #     type: "aws_proxy"
    #     httpMethod: "POST"
    #     uri: "${move_stock_item_arn}"
    #     passthroughBehavior: "when_no_match"
    post:
      tags: 
        - Store Management
      summary: Moves specified stock item to target store
      operationId: moveStockItem
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  format: int32
                toStore:
                  type: string
                  format: uuid
      responses:
        '200':
          $ref: "#/components/responses/SuccessResponse"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${move_stock_item_arn}"
        passthroughBehavior: "when_no_match"
    # delete:   
    #   tags:
    #     - Store Management
    #   security:
    #     - cognito_iam_authorizer: []
    #   summary: Deletes stock item from specified store
    #   operationId: deleteStoreItem
    #   parameters:
    #     - name: storeId
    #       in: path
    #       required: true
    #       schema:
    #         type: string
    #         format: uuid
    #     - name: itemId
    #       in: path
    #       required: true
    #       schema:
    #         type: string
    #         format: uuid
    #   responses:
    #     '200':
    #       description: Success
    #       content:
    #         application/json:
    #           schema:
    #               $ref: "#/components/schemas/StoreItem"
    #     '401':
    #       $ref: '#/components/responses/UnauthorizedResponse'
    #     '403':
    #       $ref: '#/components/responses/ForbiddenResponse'
    #     '404':
    #       $ref: '#/components/responses/NotFoundResponse'

  # /cart:
  #   get:   
  #     tags:
  #       - User Cart Management
  #     summary: Gets the logged-in user's shopping cart
  #     operationId: getUserCart
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: "#/components/schemas/StoreItem"
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedResponse'
  #       '404':
  #         $ref: '#/components/responses/NotFoundResponse'
  #   put:
  #     tags: 
  #       - User Cart Management
  #     summary: Adds or updates stock item to the logged-in user's shopping cart
  #     operationId: updateCartItem
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/StoreItem"
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedResponse'
  #       '404':
  #         $ref: '#/components/responses/NotFoundResponse'

  # /cart/{itemId}:
  #   delete:
  #     tags: 
  #       - User Cart Management
  #     summary: Removes stock item from the logged-in user's shopping cart
  #     operationId: removeItemFromCart
  #     parameters:
  #       - name: itemId
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/StoreItem"
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedResponse'
  #       '404':
  #         $ref: '#/components/responses/NotFoundResponse'

  # /cart/reserve/{itemId}:
  #   post:
  #     tags: 
  #       - User Cart Management
  #     summary: Reserves an out-of-stock stock item
  #     operationId: reserveStockItem
  #     parameters:
  #       - name: itemId
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           format: uuid
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               email:
  #                 type: string
  #                 format: email
  #     responses:
  #       '200':
  #         $ref: '#/components/responses/SuccessResponse'
  #       '401':
  #         $ref: '#/components/responses/UnauthorizedResponse'
  #       '404':
  #         $ref: '#/components/responses/NotFoundResponse'
  
  /auth_test:
    get:
      tags: 
        - Authentication Test
      summary: Temporary endpoint to test authenticaiton
      operationId: authTest
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${auth_test_user_arn}"
        passthroughBehavior: "when_no_match"
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
          
  /auth_test_admin:
    get:
      tags: 
        - Authentication Test
      summary: Temporary endpoint to test admin authorization
      operationId: authTestAdmin
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${auth_test_admin_arn}"
        passthroughBehavior: "when_no_match"
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /get_credentials:
    get:
      tags:
      - Authorization
      summary: Get temporary AWS credentials from Cognito ID token
      operationId: getCredentials
      security:
        - cognito_token_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${get_credentials_arn}"
        passthroughBehavior: "when_no_match"
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
  /users/promote/{userId}:
    post:
      tags:
      - User Management
      summary: Promote user to admin
      operationId: promoteUser
      security:
        - cognito_iam_authorizer: []
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "${promote_user_arn}"
        passthroughBehavior: "when_no_match"
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

components:
  schemas:
    ItemTemplate:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Watch
    ItemTemplateNoID:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Watch
        
    StoreItem:
      type: object
      required:
        - id
        - quantity
      properties:
        quantity:
          type: integer
          format: int32
          example: 1102
    Store:
      required:
        - id
        - name
        - address
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: ACME Corporation
        address:
          type: string
          format: address
          example: 'Via Roma'
      type: object
    StoreNoID:
      required:
        - name
        - address
      properties:
        name:
          type: string
          example: ACME Corporation
        address:
          type: string
          format: address
          example: 'Via Roma'
      type: object
  securitySchemes:
    cognito_iam_authorizer:
      type: apiKey
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "awsSigv4"
    cognito_token_authorizer:
      type: apiKey
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "COGNITO_USER_POOLS"
      x-amazon-apigateway-authorizer:
        type: "COGNITO_USER_POOLS"
        providerARNs:
          - "${cognito_user_pool_arn}"

  responses:
    SuccessResponse:
      description: Success
    UnauthorizedResponse:
      description: You need to be authenticated to perform this action.
    ForbiddenResponse:
      description: You don't have the necessary permissions to perform this action.
    NotFoundResponse:
      description: Resource not found
