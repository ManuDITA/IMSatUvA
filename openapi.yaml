openapi: 3.0.0
info:
  title: Store and Stock Management API
  description: API for managing stores, stock, and admin users
  version: 1.0.0

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/uvadevopslab/tutorial/1.0.0
  - url: https://{env}.example.com/{version}
    variables:
      env:
        default: dev    
        enum:
          - prod         
          - dev     
          - testing
      version:
        default: v1

paths:
  /items:
    get:
      tags: 
        - Item Management  
      security:
        - bearerAuthAdmin: []
      summary: Gets all stock item definitions
      operationId: getAllItemDefs
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemTemplate"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      tags: 
        - Item Management
      security:
        - bearerAuthUser: []
      summary: Creates a stock item definition
      operationId: postItemDefs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                obj:
                  $ref: "#/components/schemas/ItemTemplateNoID"
                warehouseId:
                  example: w1001
                  type: string
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'   
    put:
      tags: 
        - Item Management
      security:
        - bearerAuthAdmin: []
      summary: Adds or updates item definition
      operationId: updateItemDef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Added/Updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemTemplate"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /items/{itemId}:
    get:
      tags: 
        - Item Management
      security:
        - bearerAuthAdmin: []
      summary: Gets target item definition
      operationId: getItemDef
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemTemplate"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      tags: 
        - Item Management
      security:
        - bearerAuthAdmin: []
      summary: Deletes target item definition
      operationId: deleteItemDef
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemTemplate"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /stores:
    get:
      tags: 
        - Store Management
      summary: Gets all stores
      security:
        - bearerAuthUser: []
      operationId: getAllStores
      responses:
        '200':
          description: List of available stores
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Store"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      tags: 
        - Store Management
      security:
        - bearerAuthAdmin: []
      summary: Adds or updates a store
      operationId: updateStore
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Store updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'

  /stores/{storeId}:
    get:
      tags: 
        - Store Management
      security:
        - bearerAuthUser: []
      summary: Gets target store
      operationId: getStoreById
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Store details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Store"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    delete:
      tags: 
        - Store Management
      security:
        - bearerAuthAdmin: []
      summary: Deletes a store
      operationId: deletetore
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Store removed
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /stores/{storeId}/stock/:
    get:   
      tags:
        - Store Management
      security:
        - bearerAuthUser: []
      summary: Gets all stock items from specified store
      operationId: getStoreInventory
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
                  
  /stores/{storeId}/{itemId}:
    get:   
      tags:
        - Store Management
      security:
        - bearerAuthUser: []
      summary: Gets item from specified store
      operationId: getStoreItem
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/StoreItem"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    put:   
      tags:
        - Store Management
      security:
        - bearerAuthAdmin: []
      summary: Adds or updates stock item from specified store
      operationId: updateStoreItem
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StoreItem"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StoreItem"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    post:
      tags: 
        - Store Management
      security:
        - bearerAuthAdmin: []
      summary: Moves specified stock item to target store
      operationId: moveStockItem
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  format: int32
                toStore:
                  type: string
                  format: uuid
      responses:
        '200':
          $ref: "#/components/responses/SuccessResponse"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    delete:   
      tags:
        - Store Management
      security:
        - bearerAuthAdmin: []
      summary: Deletes stock item from specified store
      operationId: deleteStoreItem
      parameters:
        - name: storeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/StoreItem"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
        

  /cart:
    get:   
      tags:
        - User Cart Management
      security:
        - bearerAuthUser: []
      summary: Gets the logged-in user's shopping cart
      operationId: getUserCart
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StoreItem"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
    put:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      summary: Adds or updates stock item to the logged-in user's shopping cart
      operationId: updateCartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreItem"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /cart/{itemId}:
    delete:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      summary: Removes stock item from the logged-in user's shopping cart
      operationId: removeItemFromCart
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StoreItem"
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

  /cart/reserve/{itemId}:
    post:
      tags: 
        - User Cart Management
      security:
        - bearerAuthUser: []
      summary: Reserves an out-of-stock stock item
      operationId: reserveStockItem
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          $ref: '#/components/responses/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'

components:
  schemas:
    ItemTemplate:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        name:
          type: string
          example: Watch
    ItemTemplateNoID:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Watch
        
    StoreItem:
      type: object
      required:
        - id
        - quantity
      properties:
        quantity:
          type: integer
          format: int32
          example: 1102
    Store:
      required:
        - id
        - name
        - address
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: ACME Corporation
        address:
          type: string
          format: address
          example: 'Via Roma'
      type: object
  securitySchemes:
    bearerAuthUser:
      type: http
      scheme: bearer
      bearerFormat: JWT
    bearerAuthAdmin:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    SuccessResponse:
      description: Success
    UnauthorizedResponse:
      description: You need to be authenticated to perform this action.
    ForbiddenResponse:
      description: You don't have the necessary permissions to perform this action.
    NotFoundResponse:
      description: Resource not found
